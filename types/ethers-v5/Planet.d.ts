/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PlanetInterface extends ethers.utils.Interface {
  functions: {
    "getCoordinates()": FunctionFragment;
    "getName()": FunctionFragment;
    "getResourceLiquidity(address)": FunctionFragment;
    "swap(address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCoordinates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getResourceLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCoordinates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResourceLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export class Planet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PlanetInterface;

  functions: {
    getCoordinates(
      overrides?: CallOverrides
    ): Promise<[number, number] & { x: number; y: number }>;

    "getCoordinates()"(
      overrides?: CallOverrides
    ): Promise<[number, number] & { x: number; y: number }>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    "getName()"(overrides?: CallOverrides): Promise<[string]>;

    getResourceLiquidity(
      resource: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getResourceLiquidity(address)"(
      resource: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swap(
      resource1: string,
      resource2: string,
      amount1out: BigNumberish,
      amount2out: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(address,address,uint256,uint256)"(
      resource1: string,
      resource2: string,
      amount1out: BigNumberish,
      amount2out: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getCoordinates(
    overrides?: CallOverrides
  ): Promise<[number, number] & { x: number; y: number }>;

  "getCoordinates()"(
    overrides?: CallOverrides
  ): Promise<[number, number] & { x: number; y: number }>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  getResourceLiquidity(
    resource: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getResourceLiquidity(address)"(
    resource: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swap(
    resource1: string,
    resource2: string,
    amount1out: BigNumberish,
    amount2out: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(address,address,uint256,uint256)"(
    resource1: string,
    resource2: string,
    amount1out: BigNumberish,
    amount2out: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getCoordinates(
      overrides?: CallOverrides
    ): Promise<[number, number] & { x: number; y: number }>;

    "getCoordinates()"(
      overrides?: CallOverrides
    ): Promise<[number, number] & { x: number; y: number }>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    getResourceLiquidity(
      resource: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getResourceLiquidity(address)"(
      resource: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      resource1: string,
      resource2: string,
      amount1out: BigNumberish,
      amount2out: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swap(address,address,uint256,uint256)"(
      resource1: string,
      resource2: string,
      amount1out: BigNumberish,
      amount2out: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getCoordinates(overrides?: CallOverrides): Promise<BigNumber>;

    "getCoordinates()"(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    getResourceLiquidity(
      resource: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getResourceLiquidity(address)"(
      resource: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      resource1: string,
      resource2: string,
      amount1out: BigNumberish,
      amount2out: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swap(address,address,uint256,uint256)"(
      resource1: string,
      resource2: string,
      amount1out: BigNumberish,
      amount2out: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCoordinates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCoordinates()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getResourceLiquidity(
      resource: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getResourceLiquidity(address)"(
      resource: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      resource1: string,
      resource2: string,
      amount1out: BigNumberish,
      amount2out: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(address,address,uint256,uint256)"(
      resource1: string,
      resource2: string,
      amount1out: BigNumberish,
      amount2out: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
