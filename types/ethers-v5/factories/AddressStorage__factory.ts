/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { AddressStorage } from "../AddressStorage";

export class AddressStorage__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<AddressStorage> {
    return super.deploy(overrides || {}) as Promise<AddressStorage>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AddressStorage {
    return super.attach(address) as AddressStorage;
  }
  connect(signer: Signer): AddressStorage__factory {
    return super.connect(signer) as AddressStorage__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressStorage {
    return new Contract(address, _abi, signerOrProvider) as AddressStorage;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xc99a04f0",
        type: "bytes32",
      },
    ],
    name: "c_0xc99a04f0",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061036f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806321f8a7211461003b57806391f5650614610093575b600080fd5b6100676004803603602081101561005157600080fd5b81019080803590602001909291905050506100c1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100bf600480360360208110156100a957600080fd5b8101908080359060200190929190505050610315565b005b60006100ef7fdf40c6645b4230f8bc3d0b2cb6c3d157cc9e784f7e46a1189dc370b71c505eab60001b610315565b61011b7ff60490542a10aa0f86e7c26c3b480cd3a5186d13ad7fd2bc0e8059aa1a51326660001b610315565b6101477fbb4b944840388c71af8434bbcff75148edd48dbc0e9c58490bdf2ee2ea92808d60001b610315565b600080600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506101aa7f1d7bf4cc4d23cb371171b584e1d5fbcd021669c08e52eb5e5da620782d61a67960001b610315565b6101d67f586a6438447f1e7513374d961ae22d37d51d1bf4290bd06ecf9c9a85e9530a4060001b610315565b6102027f0e4900d551e3a22d0cc8c7f8a708a8714c8f97f0e0b33913b1443d4d23ebe95c60001b610315565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610288576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806103196021913960400191505060405180910390fd5b6102b47f4d5aaaeaeb7d380fda74780ec9ce7e5a511f89a90456a50d6a7c8ed3cc96b67660001b610315565b6102e07f5035870879c5b71fc2a711f1eea9a93a3695cd5bb20bd2d89b52a4a1601732bc60001b610315565b61030c7f9863233f2c54f2c34e8e37711ae7dee27e87f2cbf2ad80007c073d94a1ff1baf60001b610315565b80915050919050565b5056fe4164647265737353746f726167653a2041646472657373206e6f7420666f756e64a26469706673582212204b1e0ace09879f1131c0580ad99b98a809963b1574ad47d3c8780a585cfc9d2a64736f6c634300060c0033";
