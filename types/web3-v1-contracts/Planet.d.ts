/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewResourcePair = ContractEventLog<{
  resource1: string;
  resource2: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface Planet extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Planet;
  clone(): Planet;
  methods: {
    addResourcePair(
      resource1: string,
      resource2: string
    ): NonPayableTransactionObject<void>;

    getCoordinates(): NonPayableTransactionObject<{
      x: string;
      y: string;
      0: string;
      1: string;
    }>;

    getName(): NonPayableTransactionObject<string>;

    getResourceLiquidity(resource: string): NonPayableTransactionObject<string>;

    getResourcePair(
      resource1: string,
      resource2: string
    ): NonPayableTransactionObject<string>;

    getResourcePrice(
      resource1: string,
      resource2: string
    ): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    swap(
      resource1: string,
      resource2: string,
      amount1out: number | string,
      amount2out: number | string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    NewResourcePair(cb?: Callback<NewResourcePair>): EventEmitter;
    NewResourcePair(
      options?: EventOptions,
      cb?: Callback<NewResourcePair>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewResourcePair", cb: Callback<NewResourcePair>): void;
  once(
    event: "NewResourcePair",
    options: EventOptions,
    cb: Callback<NewResourcePair>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
