/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewPlanetAdded = ContractEventLog<{
  planet: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface PlanetRepository extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PlanetRepository;
  clone(): PlanetRepository;
  methods: {
    addPlanet(planet: string): NonPayableTransactionObject<void>;

    calculateDistance(
      planet1: string,
      planet2: string
    ): NonPayableTransactionObject<string>;

    getPlanetByIndex(
      index: number | string
    ): NonPayableTransactionObject<string>;

    getPlanetCoord(
      index: number | string
    ): NonPayableTransactionObject<{
      x: string;
      y: string;
      0: string;
      1: string;
    }>;

    getPlanetName(index: number | string): NonPayableTransactionObject<string>;

    getPlanetsLength(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    NewPlanetAdded(cb?: Callback<NewPlanetAdded>): EventEmitter;
    NewPlanetAdded(
      options?: EventOptions,
      cb?: Callback<NewPlanetAdded>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewPlanetAdded", cb: Callback<NewPlanetAdded>): void;
  once(
    event: "NewPlanetAdded",
    options: EventOptions,
    cb: Callback<NewPlanetAdded>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
